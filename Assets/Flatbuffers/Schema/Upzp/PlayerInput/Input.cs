// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Upzp.PlayerInput
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Player's input.
public struct Input : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Input GetRootAsInput(ByteBuffer _bb) { return GetRootAsInput(_bb, new Input()); }
  public static Input GetRootAsInput(ByteBuffer _bb, Input obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Input __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong Sequence { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public uint Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool Disconnect { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float Direction { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Move { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Upzp.PlayerInput.Input> CreateInput(FlatBufferBuilder builder,
      ulong sequence = 0,
      uint id = 0,
      bool disconnect = false,
      float direction = 0.0f,
      bool move = false) {
    builder.StartTable(5);
    Input.AddSequence(builder, sequence);
    Input.AddDirection(builder, direction);
    Input.AddId(builder, id);
    Input.AddMove(builder, move);
    Input.AddDisconnect(builder, disconnect);
    return Input.EndInput(builder);
  }

  public static void StartInput(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSequence(FlatBufferBuilder builder, ulong sequence) { builder.AddUlong(0, sequence, 0); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(1, id, 0); }
  public static void AddDisconnect(FlatBufferBuilder builder, bool disconnect) { builder.AddBool(2, disconnect, false); }
  public static void AddDirection(FlatBufferBuilder builder, float direction) { builder.AddFloat(3, direction, 0.0f); }
  public static void AddMove(FlatBufferBuilder builder, bool move) { builder.AddBool(4, move, false); }
  public static Offset<Upzp.PlayerInput.Input> EndInput(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Upzp.PlayerInput.Input>(o);
  }
  public static void FinishInputBuffer(FlatBufferBuilder builder, Offset<Upzp.PlayerInput.Input> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedInputBuffer(FlatBufferBuilder builder, Offset<Upzp.PlayerInput.Input> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
