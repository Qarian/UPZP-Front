// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace mainServer.schemas.FNewWaitingRoom
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FNewWaitingRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FNewWaitingRoom GetRootAsFNewWaitingRoom(ByteBuffer _bb) { return GetRootAsFNewWaitingRoom(_bb, new FNewWaitingRoom()); }
  public static FNewWaitingRoom GetRootAsFNewWaitingRoom(ByteBuffer _bb, FNewWaitingRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FNewWaitingRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string City { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCityBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCityBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCityArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int ClientsMax { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<mainServer.schemas.FNewWaitingRoom.FNewWaitingRoom> CreateFNewWaitingRoom(FlatBufferBuilder builder,
      StringOffset cityOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      int clientsMax = 0) {
    builder.StartTable(3);
    FNewWaitingRoom.AddClientsMax(builder, clientsMax);
    FNewWaitingRoom.AddName(builder, nameOffset);
    FNewWaitingRoom.AddCity(builder, cityOffset);
    return FNewWaitingRoom.EndFNewWaitingRoom(builder);
  }

  public static void StartFNewWaitingRoom(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCity(FlatBufferBuilder builder, StringOffset cityOffset) { builder.AddOffset(0, cityOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddClientsMax(FlatBufferBuilder builder, int clientsMax) { builder.AddInt(2, clientsMax, 0); }
  public static Offset<mainServer.schemas.FNewWaitingRoom.FNewWaitingRoom> EndFNewWaitingRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<mainServer.schemas.FNewWaitingRoom.FNewWaitingRoom>(o);
  }
  public static void FinishFNewWaitingRoomBuffer(FlatBufferBuilder builder, Offset<mainServer.schemas.FNewWaitingRoom.FNewWaitingRoom> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFNewWaitingRoomBuffer(FlatBufferBuilder builder, Offset<mainServer.schemas.FNewWaitingRoom.FNewWaitingRoom> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
