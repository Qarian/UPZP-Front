// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace mainServer.schemas.FWaitingRoom
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FClient : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FClient GetRootAsFClient(ByteBuffer _bb) { return GetRootAsFClient(_bb, new FClient()); }
  public static FClient GetRootAsFClient(ByteBuffer _bb, FClient obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FClient __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public mainServer.schemas.FWaitingRoom.FVehicle? Vehicle { get { int o = __p.__offset(8); return o != 0 ? (mainServer.schemas.FWaitingRoom.FVehicle?)(new mainServer.schemas.FWaitingRoom.FVehicle()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<mainServer.schemas.FWaitingRoom.FClient> CreateFClient(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      int id = 0,
      Offset<mainServer.schemas.FWaitingRoom.FVehicle> vehicleOffset = default(Offset<mainServer.schemas.FWaitingRoom.FVehicle>)) {
    builder.StartTable(3);
    FClient.AddVehicle(builder, vehicleOffset);
    FClient.AddId(builder, id);
    FClient.AddName(builder, nameOffset);
    return FClient.EndFClient(builder);
  }

  public static void StartFClient(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(1, id, 0); }
  public static void AddVehicle(FlatBufferBuilder builder, Offset<mainServer.schemas.FWaitingRoom.FVehicle> vehicleOffset) { builder.AddOffset(2, vehicleOffset.Value, 0); }
  public static Offset<mainServer.schemas.FWaitingRoom.FClient> EndFClient(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<mainServer.schemas.FWaitingRoom.FClient>(o);
  }
};


}
