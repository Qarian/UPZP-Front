// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace mainServer.schemas.FWaitingRoom
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FVehicle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FVehicle GetRootAsFVehicle(ByteBuffer _bb) { return GetRootAsFVehicle(_bb, new FVehicle()); }
  public static FVehicle GetRootAsFVehicle(ByteBuffer _bb, FVehicle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FVehicle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public mainServer.schemas.FWaitingRoom.FVehicleType VehicleType { get { int o = __p.__offset(4); return o != 0 ? (mainServer.schemas.FWaitingRoom.FVehicleType)__p.bb.GetSbyte(o + __p.bb_pos) : mainServer.schemas.FWaitingRoom.FVehicleType.Pedestrian; } }
  public int Velocity { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<mainServer.schemas.FWaitingRoom.FVehicle> CreateFVehicle(FlatBufferBuilder builder,
      mainServer.schemas.FWaitingRoom.FVehicleType vehicleType = mainServer.schemas.FWaitingRoom.FVehicleType.Pedestrian,
      int velocity = 0) {
    builder.StartTable(2);
    FVehicle.AddVelocity(builder, velocity);
    FVehicle.AddVehicleType(builder, vehicleType);
    return FVehicle.EndFVehicle(builder);
  }

  public static void StartFVehicle(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddVehicleType(FlatBufferBuilder builder, mainServer.schemas.FWaitingRoom.FVehicleType vehicleType) { builder.AddSbyte(0, (sbyte)vehicleType, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, int velocity) { builder.AddInt(1, velocity, 0); }
  public static Offset<mainServer.schemas.FWaitingRoom.FVehicle> EndFVehicle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<mainServer.schemas.FWaitingRoom.FVehicle>(o);
  }
  public static void FinishFVehicleBuffer(FlatBufferBuilder builder, Offset<mainServer.schemas.FWaitingRoom.FVehicle> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFVehicleBuffer(FlatBufferBuilder builder, Offset<mainServer.schemas.FWaitingRoom.FVehicle> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
