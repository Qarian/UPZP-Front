// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace mainServer.schemas.FWaitingRoom
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FWaitingRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FWaitingRoom GetRootAsFWaitingRoom(ByteBuffer _bb) { return GetRootAsFWaitingRoom(_bb, new FWaitingRoom()); }
  public static FWaitingRoom GetRootAsFWaitingRoom(ByteBuffer _bb, FWaitingRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FWaitingRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public mainServer.schemas.FWaitingRoom.FTeam? Teams(int j) { int o = __p.__offset(6); return o != 0 ? (mainServer.schemas.FWaitingRoom.FTeam?)(new mainServer.schemas.FWaitingRoom.FTeam()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TeamsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string City { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCityBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCityBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCityArray() { return __p.__vector_as_array<byte>(8); }
  public int Host { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ClientsMax { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<mainServer.schemas.FWaitingRoom.FWaitingRoom> CreateFWaitingRoom(FlatBufferBuilder builder,
      int id = 0,
      VectorOffset teamsOffset = default(VectorOffset),
      StringOffset cityOffset = default(StringOffset),
      int host = 0,
      int clientsMax = 0) {
    builder.StartTable(5);
    FWaitingRoom.AddClientsMax(builder, clientsMax);
    FWaitingRoom.AddHost(builder, host);
    FWaitingRoom.AddCity(builder, cityOffset);
    FWaitingRoom.AddTeams(builder, teamsOffset);
    FWaitingRoom.AddId(builder, id);
    return FWaitingRoom.EndFWaitingRoom(builder);
  }

  public static void StartFWaitingRoom(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTeams(FlatBufferBuilder builder, VectorOffset teamsOffset) { builder.AddOffset(1, teamsOffset.Value, 0); }
  public static VectorOffset CreateTeamsVector(FlatBufferBuilder builder, Offset<mainServer.schemas.FWaitingRoom.FTeam>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTeamsVectorBlock(FlatBufferBuilder builder, Offset<mainServer.schemas.FWaitingRoom.FTeam>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTeamsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCity(FlatBufferBuilder builder, StringOffset cityOffset) { builder.AddOffset(2, cityOffset.Value, 0); }
  public static void AddHost(FlatBufferBuilder builder, int host) { builder.AddInt(3, host, 0); }
  public static void AddClientsMax(FlatBufferBuilder builder, int clientsMax) { builder.AddInt(4, clientsMax, 0); }
  public static Offset<mainServer.schemas.FWaitingRoom.FWaitingRoom> EndFWaitingRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<mainServer.schemas.FWaitingRoom.FWaitingRoom>(o);
  }
};


}
