// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace mainServer.schemas.FChooseWaitingRoom
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct FChooseWaitingRoom : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FChooseWaitingRoom GetRootAsFChooseWaitingRoom(ByteBuffer _bb) { return GetRootAsFChooseWaitingRoom(_bb, new FChooseWaitingRoom()); }
  public static FChooseWaitingRoom GetRootAsFChooseWaitingRoom(ByteBuffer _bb, FChooseWaitingRoom obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FChooseWaitingRoom __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<mainServer.schemas.FChooseWaitingRoom.FChooseWaitingRoom> CreateFChooseWaitingRoom(FlatBufferBuilder builder,
      int id = 0) {
    builder.StartTable(1);
    FChooseWaitingRoom.AddId(builder, id);
    return FChooseWaitingRoom.EndFChooseWaitingRoom(builder);
  }

  public static void StartFChooseWaitingRoom(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static Offset<mainServer.schemas.FChooseWaitingRoom.FChooseWaitingRoom> EndFChooseWaitingRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<mainServer.schemas.FChooseWaitingRoom.FChooseWaitingRoom>(o);
  }
  public static void FinishFChooseWaitingRoomBuffer(FlatBufferBuilder builder, Offset<mainServer.schemas.FChooseWaitingRoom.FChooseWaitingRoom> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedFChooseWaitingRoomBuffer(FlatBufferBuilder builder, Offset<mainServer.schemas.FChooseWaitingRoom.FChooseWaitingRoom> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
